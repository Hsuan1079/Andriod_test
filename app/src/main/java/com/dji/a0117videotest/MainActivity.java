package com.dji.a0117videotest;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.SurfaceTexture;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.TextureView;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import dji.common.error.DJIError;
import dji.common.error.DJISDKError;
import dji.sdk.base.BaseProduct;
import dji.sdk.camera.VideoFeeder;
import dji.sdk.codec.DJICodecManager;
import dji.sdk.sdkmanager.DJISDKInitEvent;
import dji.sdk.sdkmanager.DJISDKManager;

public class MainActivity extends AppCompatActivity implements TextureView.SurfaceTextureListener {

    private static final String TAG = MainActivity.class.getName();
    private static final String FLAG_CONNECTION_CHANGE = "dji_sdk_connection_change";
    private static final int REQUEST_PERMISSION_CODE = 12345;

    private BaseProduct mProduct;
    private Handler mHandler;
    private DJICodecManager codecManager;
    private VideoStreamSender videoStreamSender;

    private TextureView videoSurface;
    private TextView statusText;
    private Button startStreamBtn;
    private boolean isStreaming = false; // Ë®òÈåÑÊòØÂê¶Ê≠£Âú®‰∏≤ÊµÅ

    private static final String[] REQUIRED_PERMISSION_LIST = new String[]{
            Manifest.permission.VIBRATE,
            Manifest.permission.INTERNET,
            Manifest.permission.ACCESS_WIFI_STATE,
            Manifest.permission.WAKE_LOCK,
            Manifest.permission.ACCESS_COARSE_LOCATION,
            Manifest.permission.ACCESS_NETWORK_STATE,
            Manifest.permission.ACCESS_FINE_LOCATION,
            Manifest.permission.CHANGE_WIFI_STATE,
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.BLUETOOTH,
            Manifest.permission.BLUETOOTH_ADMIN,
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.READ_PHONE_STATE,
    };

    private List<String> missingPermission = new ArrayList<>();
    private AtomicBoolean isRegistrationInProgress = new AtomicBoolean(false);

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Ê™¢Êü•Ê¨äÈôê
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            checkAndRequestPermissions();
        }

        // ÂàùÂßãÂåñ UI
        videoSurface = findViewById(R.id.video_surface);
        statusText = findViewById(R.id.statusText);
        startStreamBtn = findViewById(R.id.startStreamBtn);

        videoSurface.setSurfaceTextureListener(this);

        // ÂàùÂßãÂåñ UDP ÂΩ±ÂÉè‰∏≤ÊµÅ
        String targetIP = "192.168.1.100";  // ‰Ω†ÁöÑÈõªËÖ¶ IP
        int targetPort = 5000;              // ‰Ω†ÁöÑÈõªËÖ¶ UDP Êé•Êî∂Á´ØÂè£
        videoStreamSender = new VideoStreamSender(targetIP, targetPort, this);

        // Ë®≠ÂÆöÊåâÈàïÈªûÊìä‰∫ã‰ª∂ (ÈñãÂßã/ÂÅúÊ≠¢‰∏≤ÊµÅ)
        startStreamBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                toggleStreaming();
            }
        });

        showStatus("Á≠âÂæÖ DJI Ë®≠ÂÇôÈÄ£Êé•...");
    }

    /**
     * Ê™¢Êü•‰∏¶Ë´ãÊ±ÇÊ¨äÈôê
     */
    private void checkAndRequestPermissions() {
        for (String eachPermission : REQUIRED_PERMISSION_LIST) {
            if (ContextCompat.checkSelfPermission(this, eachPermission) != PackageManager.PERMISSION_GRANTED) {
                missingPermission.add(eachPermission);
            }
        }
        if (!missingPermission.isEmpty()) {
            ActivityCompat.requestPermissions(this,
                    missingPermission.toArray(new String[0]),
                    REQUEST_PERMISSION_CODE);
        } else {
            startSDKRegistration();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_PERMISSION_CODE) {
            for (int i = grantResults.length - 1; i >= 0; i--) {
                if (grantResults[i] == PackageManager.PERMISSION_GRANTED) {
                    missingPermission.remove(permissions[i]);
                }
            }
        }
        if (missingPermission.isEmpty()) {
            startSDKRegistration();
        } else {
            showStatus("Áº∫Â∞ëÊ¨äÈôêÔºåÁÑ°Ê≥ïÁπºÁ∫å");
        }
    }

    private void startSDKRegistration() {
        if (isRegistrationInProgress.compareAndSet(false, true)) {
            DJISDKManager.getInstance().registerApp(getApplicationContext(), new DJISDKManager.SDKManagerCallback() {
                @Override
                public void onRegister(DJIError djiError) {
                    if (djiError == DJISDKError.REGISTRATION_SUCCESS) {
                        DJISDKManager.getInstance().startConnectionToProduct();
                        showStatus("SDK Ë®ªÂÜäÊàêÂäüÔºåÈÄ£Êé• DJI Ë®≠ÂÇô...");
                    } else {
                        showStatus("SDK Ë®ªÂÜäÂ§±ÊïóÔºö" + djiError.getDescription());
                    }
                }

                @Override
                public void onProductConnect(@NonNull BaseProduct baseProduct) {
                    showStatus("DJI Ë®≠ÂÇôÂ∑≤ÈÄ£Êé•");
                }

                @Override
                public void onProductDisconnect() {
                    showStatus("DJI Ë®≠ÂÇôÂ∑≤Êñ∑Á∑ö");
                    stopStreaming();
                }
                @Override
                public void onProductChanged(BaseProduct baseProduct) {
                    // üîπ ÈÄôÂÄãÊñπÊ≥ïÁèæÂú®ÊòØÂøÖÈ†àÁöÑ
                    showStatus("DJI Ë®≠ÂÇôÁãÄÊÖãËÆäÊõ¥Ôºö" + (baseProduct != null ? baseProduct.getModel().getDisplayName() : "Êú™Áü•Ë®≠ÂÇô"));
                }

                @Override
                public void onComponentChange(BaseProduct.ComponentKey componentKey, dji.sdk.base.BaseComponent oldComponent, dji.sdk.base.BaseComponent newComponent) {
                    showStatus("ÁµÑ‰ª∂ËÆäÊõ¥Ôºö" + componentKey.toString());
                }

                @Override
                public void onInitProcess(DJISDKInitEvent djisdkInitEvent, int i) {
                    showStatus("SDK ÂàùÂßãÂåñ‰∏≠Ôºö" + djisdkInitEvent.toString());
                }

                @Override
                public void onDatabaseDownloadProgress(long current, long total) {
                    showStatus("Ë≥áÊñôÂ∫´‰∏ãËºâÈÄ≤Â∫¶Ôºö" + current + "/" + total);
                }
            });
        }
    }

    private void toggleStreaming() {
        if (isStreaming) {
            stopStreaming();
        } else {
            startStreaming();
        }
    }

    private void startStreaming() {
        if (!isStreaming) {
            showStatus("ÈñãÂßãÂΩ±ÂÉè‰∏≤ÊµÅ...");
            videoStreamSender.startStreaming();
            isStreaming = true;
            startStreamBtn.setText("ÂÅúÊ≠¢‰∏≤ÊµÅ");
        }
    }

    private void stopStreaming() {
        if (isStreaming) {
            showStatus("ÂΩ±ÂÉè‰∏≤ÊµÅÂ∑≤ÂÅúÊ≠¢");
            videoStreamSender.stopStreaming();
            isStreaming = false;
            startStreamBtn.setText("ÈñãÂßã‰∏≤ÊµÅ");
        }
    }

    private void showStatus(final String status) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                statusText.setText("ÁãÄÊÖãÔºö" + status);
            }
        });
    }

    @Override
    public void onSurfaceTextureAvailable(@NonNull SurfaceTexture surface, int width, int height) {
        if (codecManager == null) {
            codecManager = new DJICodecManager(this, surface, width, height);
        }

        // Áõ¥Êé•Á∂ÅÂÆö Video Data Listener
        VideoFeeder.getInstance().getPrimaryVideoFeed().addVideoDataListener((videoBuffer, size) -> {
            if (codecManager != null) {
                codecManager.sendDataToDecoder(videoBuffer, size);
            }
        });
    }



    @Override
    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
        if (codecManager != null) {
            codecManager.cleanSurface();
            codecManager = null;
        }
        return false;
    }

    @Override
    public void onSurfaceTextureUpdated(SurfaceTexture surface) {}
    @Override
    public void onSurfaceTextureSizeChanged(@NonNull SurfaceTexture surface, int width, int height) {
        // ÈÄôÂÄãÊñπÊ≥ïÂú® Surface Â∞∫ÂØ∏ÊîπËÆäÊôÇËß∏ÁôºÔºåÈÄöÂ∏∏‰∏çÈúÄË¶ÅÂÅöÈ°çÂ§ñËôïÁêÜ
        if (codecManager != null) {
            codecManager.cleanSurface();
            codecManager = new DJICodecManager(this, surface, width, height);
        }
    }

}
